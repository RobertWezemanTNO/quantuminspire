properties([
  pipelineTriggers([[$class: 'PeriodicFolderTrigger', interval: '1d']]),
  parameters([
    string(name: 'API_URL', defaultValue: 'https://api.quantum-inspire.com/', description: 'Quantum Inspire API url'),
    string(name: 'API_CREDENTIALS_ID', defaultValue: 'api.quantum-inspire.com', description: 'Jenkins credentials ID'),
  ])
])
pipeline {
    agent {
        dockerfile {
              filename 'src/tests/Dockerfile.build'
              args '-v pip_cache:/var/pip_cache'
        }
    }
    stages {
        stage('Checkout modules') {
            steps {
                sh 'virtualenv venv'
                sh '''
                    . ./venv/bin/activate &&
                    pwd &&
                    ls -lah &&
                    pip install qiskit --cache-dir /var/pip_cache &&
                    pip uninstall -y qiskit --cache-dir /var/pip_cache &&
                    git clone https://github.com/Qiskit/qiskit &&
                    pip install ./qiskit --upgrade --cache-dir /var/pip_cache -r ./qiskit/requirements-dev.txt
                   '''
            }
        }
        stage('Build') {
            steps {
                sh 'virtualenv venv'
                sh '''
                    . ./venv/bin/activate &&
                    pip install . --upgrade --cache-dir /var/pip_cache -r ./src/tests/requirements.txt
                   '''
           }
        }
        stage('Backend Test') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: API_CREDENTIALS_ID,
                    usernameVariable: 'API_USERNAME', passwordVariable: 'API_PASSWORD']]) {
                    sh 'pwd'
                    sh 'set'
                    sh 'echo "API_URL: ${API_URL}"'
                    sh 'echo "API_CREDENTIALS_ID: ${API_CREDENTIALS_ID}"'
                    sh 'echo "API_USERNAME: ${API_USERNAME}"'
                    sh 'echo "API_PASSWORD: ${API_PASSWORD}"'
                    sh '. ./venv/bin/activate && python ./docs/example_qiskit_entangle.py'
                }
            }
        }
    }
}
